const GameCommand = require('../../classes/gamecommand.class');
const VillainsEmbed = require('../../classes/vembed.class');

module.exports = class UseCommand extends GameCommand {
    constructor() {
        super({
            name: 'use',
            category: 'game',
            description: 'Use your items',
            extensions: ["levels", "profile", "inventory", "xpboost", "health"]
        });
    }

    async run(client, message, args) {
        let props = {
            caption: {
                text: "Use"
            },
            title: {},
            description: "",
            footer: {
                msg: ""
            },
            players: {
                user: {},
                target: {}
            }
        }

        const user = message.author
        const loaded = user
        props.players.user = {
            name: user.username,
            avatar: user.displayAvatarURL({ format: "png", dynamic: true })
        }

        if (loaded?.bot && loaded.bot) {
            props.title.text = "Error"
            props.description = this.errors.cantActionBot.join("\n")
        }

        if (props.title.text != "Error") {
            const inventoryData = await this.inventoryModel.findOne({
                userID: loaded.id
            });
            const profileData = await this.profileModel.findOne({
                userID: loaded.id
            })

            if (!inventoryData || !profileData) {
                props.title.text = "Error"
                props.description = "This user doesn't exist"
            }

            var used_item = args.join("").toLowerCase()

            if(!used_item || used_item !== "life potion" || "bananas" ) {
                props.description = `This Item doesn't exist (${used_item})`
            }

            if (used_item === 'life potion') {

                var lifepotioncheck = await this.inventoryModel.findOne({
                    userID: loaded.id
                }, {
                    consumables: ['üß™']
                });
                if (lifepotioncheck === null || undefined || 0) {
                    message.reply('You must have a life potion to heal.')
                } else {
                    await this.inventoryModel.findOneAndUpdate({
                        userID: loaded.id,
                    }, {
                        $pull: {
                            consumables: ['üß™'] * 1,
                        },
                    });
                    await this.healthModel.findOneAndUpdate({
                        userID: message.author.id,
                    }, {
                        $set: {
                            health: 100,
                        },
                    });
                    props.description = `<@${loaded.id}> just used 1 üß™ Life Potion!
                    Their Health has been restored`
                }
            }

            if (used_item === 'bananas') {
                await this.inventoryModel.findOneAndUpdate({
                    userID: user.id,
                }, {
                    $pull: {
                        items: ['üçå'] * 1,
                    },
                });
                props.description = `<@${loaded.id}> just used 1 üçå.\nTheir minions are now happily satisfied.`

                let embed = new VillainsEmbed(props)
                await this.send(message, embed);

                var number = Math.round(Math.random() * 100);
                var minionsmultiple = Math.round(profileData.minions / 4);

                var success = 4;
                var fail = 99;
                var special = 100;

                if (number <= success) {
                    await this.XPBoostModel.findOneAndUpdate({
                        userID: loaded.id,
                    }, {
                        $inc: {
                            xpboost: 25,
                        },
                    });
                    props.description += 'You have fed your minions and they are now by your side. Gaining you a 25% XP Boost!'
                } else if (number <= fail) {
                    return;
                } else if (number <= special) {
                    await this.profileModel.findOneAndUpdate({
                        userID: loaded.id,
                    }, {
                        $inc: {
                            minions: minionsmultiple,
                        },
                    });
                    props.description += `Wait what is this?!? Your Minions have just multiplied. You just gained ${minionsmultiple} Minions`
                }
            }
        }

        let embed = new VillainsEmbed(props)
        await this.send(message, embed);
    }
};
